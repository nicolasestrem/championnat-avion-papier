---
/**
 * Renders a single blog post page.
 *
 * This is a dynamic route that generates a static page for each blog post
 * in the `blog` content collection. It uses `getStaticPaths` to define
 * which paths to pre-render at build time.
 *
 * @page
 * @see src/layouts/BlogPost.astro
 * @see src/content/config.ts
 */
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';

/**
 * Generates static paths for all blog posts.
 *
 * This function is required for dynamic routes in Astro's static site generation.
 * It fetches all blog posts and creates a route for each one based on its slug.
 * The entire post object is passed as props to the page component.
 *
 * @returns {Promise<Array<{params: {slug: string}, props: CollectionEntry<'blog'>}>>} An array of objects defining the paths and props for each page.
 */
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

/**
 * The props for this page, which correspond to a single blog post entry.
 * @typedef {import('astro:content').CollectionEntry<'blog'>} Props
 */
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data}>
  <Content />
</BlogPost>